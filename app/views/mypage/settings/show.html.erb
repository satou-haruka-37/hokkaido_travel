<div class="min-h-screen p-5">
  <div class="m-5 flex justify-center">
    <div class="text-xl font-bold">ユーザー設定</div>
  </div>

  <div class="flex justify-center">
    <div class="card w-[800px] shadow-xl">
      <div class="card-body p-12">
        <%= form_with(model: @user, url: mypage_settings_path, local: true) do |f| %>
          <%= render 'shared/error_messages', object: f.object %>
          <div class="flex flex-col">
            <div id="preview-avartar" class="flex flex-wrap justify-center">
              <% if @user.avatar.present? %>
                <%= image_tag @user.avatar.to_s, class: "w-32 h-auto rounded-full" %>
              <% else %>
                <%= image_tag ("default.png"), class: "w-32 h-auto rounded-full" %>
              <% end %>
            </div>
            <div class="flex flex-col mt-5">
              <%= f.label :avatar %>
              <%= f.file_field :avatar, onchange: "previewAvatar(event)", class: "file-input file-input-bordered file-input-info w-full" %>
              <span class="text-xs text-right mt-1">ファイル形式：jpeg、jpg、png</span>
            </div>
          </div>
          <div class="flex flex-col">
            <%= f.label :name %>
            <%= f.text_field :name, placeholder: "ニックネームを入力してください", class: "input input-bordered w-full", autocomplete: "off" %>
          </div>
          <div class="flex justify-center mt-7">
            <%= f.submit class: "btn btn-info" %>
          </div>
        <% end %>
        <div class="flex justify-end mt-4"> <!-- 追加 -->
          <%= button_to "退会", mypage_settings_path, method: :delete, form: { onSubmit: "return check()" }, class: "btn btn-error" %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // ユーザー削除時のアラート
  function check() {
    const firstConfirmation = window.confirm('本当に退会しますか？');
    const secondConfirmation = firstConfirmation && window.confirm('本当に本当に退会しますか？（お気に入りの投稿やマイページの設定が削除されます）');

    if (secondConfirmation) {
      return true;
    } else {
      window.alert('退会がキャンセルされました');
      return false;
    }
  }

  function previewAvatar(event) {
    let previewAvatar = document.getElementById('preview-avartar');
    previewAvatar.innerHTML = '';

    let file = event.target.files[0];
    let reader = new FileReader();

    reader.onload = function(e) {
      let img = new Image();
      img.src = e.target.result;

      // 正方形にリサイズ
      img.onload = function() {
        let canvas = document.createElement('canvas');
        let context = canvas.getContext('2d');

        let size = Math.min(img.width, img.height);
        canvas.width = size;
        canvas.height = size;

        let offsetX = (img.width - size) / 2;
        let offsetY = (img.height - size) / 2;
        context.drawImage(img, offsetX, offsetY, size, size, 0, 0, size, size);

        // 以降、他画像プレビューと同様
        let imgElement = new Image();
        imgElement.src = canvas.toDataURL('image/png');
        imgElement.classList.add("w-32", "h-auto", "rounded-full");
        previewAvatar.appendChild(imgElement);
      };
    };

    reader.readAsDataURL(file);
  }
</script>