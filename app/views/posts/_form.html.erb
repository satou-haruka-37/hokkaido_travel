<div class="min-h-screen">
  <div class="flex justify-center my-14">
    <div class="card w-[800px] shadow-xl">
      <div class="card-body p-10">
        <%= form_with(model: post, local: true) do |f| %>
          <div class="mb-8 flex justify-center">
            <% if f.object.new_record? %>
              <div class="text-xl font-bold">新規投稿</div>
            <% else %>
              <div class="text-xl font-bold">投稿編集</div>
            <% end %>
          </div>
          <%= render 'shared/error_messages', object: f.object %>
          <div class="flex flex-col mt-5">
            <%= f.label :title, for: "Title" %>
            <%= f.text_field :title, id: "Title", placeholder: "スポット名を入力してください", class: "input input-bordered w-full", autocomplete: "off" %>
            <span class="text-xs text-right mt-1">必須</span>
          </div>
          <div class="flex flex-col mt-5">
            <%= f.label :address, for: "Address" %>
            <%= f.text_field :address, id: "Address", placeholder: "候補から選択すると住所が自動で入力されます", class: "input input-bordered w-full", autocomplete: "off" %>
            <span class="text-xs text-right mt-1">必須（すでに投稿されている住所は使えません）</span>
          </div>
          <div class="flex flex-col mt-5">
            <%= f.label :body %>
            <%= f.text_area :body, placeholder: "どういう部分がおすすめか教えてください", class: "input input-bordered w-full textarea", autocomplete: "off" %>
            <span id="charCount" class="text-xs text-right mt-1">300文字まで</span>
          </div>
          <div class="flex flex-col mt-5">
            <div class="flex flex-col">
              <%= f.label :images %>
              <%= f.file_field :images, multiple: true, onchange: "previewImages(event)", class: "file-input file-input-bordered file-input-info w-full" %>
              <%= f.hidden_field :images_cache %>
              <span class="text-xs text-right mt-1">3枚まで（ファイル形式：jpeg、jpg、png、heic）</span>
            </div>
            <div id="preview-images" class="flex flex-wrap justify-center">
              <% if post.images.present? %>
                <% post.images.each do |image| %>
                  <%= image_tag image.to_s, class: "w-1/3 h-auto object-contain m-2" %>
                <% end %>
              <% end %>
            </div>
          </div>
          <div class="flex flex-col mt-5">
            <p>タグ</p>
            <div class="flex flex-wrap">
              <%= f.collection_check_boxes(:tag_ids, Tag.all, :id, :title, { checked: @post.tag_ids }, { multiple: true }) do |tag| %>
                <label class="px-4 my-2 w-1/2 sm:w-1/3">
                  <%= tag.check_box(class: 'hidden', data: { behavior: 'tag-checkbox' }) %>
                  <button type="button" class="btn btn-sm w-full <%= 'bg-success text-white' if @post.tag_ids.include?(tag.value.to_i) %>" data-behavior="tag-button"><%= tag.text %></button>
                </label>
              <% end %>
            </div>
            <span class="text-xs text-right mt-1">タグを1つ以上選択してください</span>
          </div>
          <div class="flex flex-col mt-5">
            <p>ベストシーズン（任意）</p>
            <div class="flex flex-wrap">
              <%= f.collection_check_boxes(:season_ids, Season.all, :id, :title, { checked: @post.season_ids }, { multiple: true }) do |season| %>
                <label class="px-2 my-2 w-1/4 sm:w-1/6">
                  <%= season.check_box(class: 'hidden', data: { behavior: 'season-checkbox' }) %>
                  <button type="button" class="btn btn-sm w-full <%= 'bg-success text-white' if @post.season_ids.include?(season.value.to_i) %>" data-behavior="season-button"><%= season.text %></button>
                </label>
              <% end %>
            </div>
          </div>
          <div class="flex justify-center mt-7">
            <button class="btn btn-info", id="submit-button">
              <%= f.submit (f.object.new_record? ? "投稿する" : "更新する") %>
            </button>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  // Google Maps APIの読み込み
  document.addEventListener('DOMContentLoaded', function() {
    let script = document.createElement('script');
    script.src = "https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&libraries=places&callback=initialize";
    document.body.appendChild(script);
  });

  // Place Autocomplete
  function initialize() {
    let inputTitle = document.getElementById('Title');
    let inputAddress = document.getElementById('Address');

    //オートコンプリートのオプション
    let options = {
      types: ['establishment'],
      componentRestrictions: { country: 'JP' },
    };

    // オートコンプリート適用
    let autocompleteTitle = new google.maps.places.Autocomplete(inputTitle, options);
    let autocompleteAddress = new google.maps.places.Autocomplete(inputAddress, options);

    // タイトルのオートコンプリートが選択されたとき
    autocompleteTitle.addListener('place_changed', function() {
      let place = autocompleteTitle.getPlace();
      inputTitle.value = place.name;
      inputAddress.value = place.formatted_address;
    });

    // 住所のオートコンプリートが選択されたとき
    autocompleteAddress.addListener('place_changed', function() {
      let place = autocompleteAddress.getPlace();
      inputTitle.value = place.name;
      inputAddress.value = place.formatted_address;
    });
  }


  // bodyの文字数カウント
  const textArea = document.querySelector('textarea[name="post[body]"]');
  const charCount = document.getElementById('charCount');

  textArea.addEventListener('input', function() {
    const maxLength = 300;
    const currentLength = textArea.value.length;

    if (currentLength <= maxLength) {
      const remaining = maxLength - currentLength;
      charCount.textContent = `${remaining}文字まで`;
    } else {
      charCount.textContent = '文字数オーバーです';
    }
  });


  // タグの選択をチェックボックスではなく色を変えて表すためのコード
  document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('[data-behavior="tag-button"]');

    buttons.forEach(function(button) {
      // PC用
      button.addEventListener('click', function(event) {
        event.preventDefault();
        const checkbox = this.parentNode.querySelector('[data-behavior="tag-checkbox"]');
        checkbox.checked = !checkbox.checked;

        if (checkbox.checked) {
          this.classList.add('bg-success', 'text-white');
        } else {
          this.classList.remove('bg-success', 'text-white');
        }
      });

      // スマートフォン用
      button.addEventListener('touchstart', function(event) {
        event.preventDefault();
        const checkbox = this.parentNode.querySelector('[data-behavior="tag-checkbox"]');
        checkbox.checked = !checkbox.checked;

        if (checkbox.checked) {
          this.classList.add('bg-success', 'text-white');
        } else {
          this.classList.remove('bg-success', 'text-white');
        }
      });
    });
  });

  // ベストシーズンの選択をチェックボックスではなく色を変えて表すためのコード
  document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('[data-behavior="season-button"]');

    buttons.forEach(function(button) {
      // PC用
      button.addEventListener('click', function(event) {
        event.preventDefault();
        const checkbox = this.parentNode.querySelector('[data-behavior="season-checkbox"]');
        checkbox.checked = !checkbox.checked;

        if (checkbox.checked) {
          this.classList.add('bg-success', 'text-white');
        } else {
          this.classList.remove('bg-success', 'text-white');
        }
      });

      // スマートフォン用
      button.addEventListener('touchstart', function(event) {
        event.preventDefault();
        const checkbox = this.parentNode.querySelector('[data-behavior="season-checkbox"]');
        checkbox.checked = !checkbox.checked;

        if (checkbox.checked) {
          this.classList.add('bg-success', 'text-white');
        } else {
          this.classList.remove('bg-success', 'text-white');
        }
      });
    });
  });


  // 画像のプレビュー表示
  function previewImages(event) {
    let previewImages = document.getElementById('preview-images');
    previewImages.innerHTML = '';

    let files = event.target.files;

    for (let i = 0; i < files.length; i++) {
      let file = files[i];
      let reader = new FileReader();

      reader.onload = function(e) {
        let img = document.createElement('img');
        img.src = e.target.result;
        img.classList.add("w-1/3", "h-auto", "object-contain", "m-2");
        previewImages.appendChild(img);
      }

      reader.readAsDataURL(file);
    }
  }


  // 送信ボタンを押した時にローディングのアニメーション
  const submitBuuton = document.getElementById('submit-button')
  // PC用
  submitBuuton.addEventListener('click', function() {
    document.getElementById('submit-button').innerHTML = '<span class="lg:loading"></span> 送信中…';
  });

  // スマホ用
  submitBuuton.addEventListener('touchstart', function() {
    document.getElementById('submit-button').innerHTML = '<span class="lg:loading"></span> 送信中…';
  });

</script>