<div class="p-7 flex flex-col md:flex-row items-center justify-between">
  <div class="flex">
    <%= image_tag 'redmarker.webp', class: "w-6 h-6" %>を押しておすすめスポットを見つけよう
  </div>
  <!-- PCサイズ以上の場合に表示 -->
  <div class="hidden sm:block mt-4 md:mt-0">
    <%= link_to "新規投稿", new_post_path, class: "btn btn-wide shadow" %>
  </div>
</div>
<div class="flex">
  <div id="search-bar" class="<%= @filtering_active ? 'w-5/6 sm:w-11/12' : 'w-full' %>">
    <div class="collapse collapse-arrow bg-base-200">
      <input type="checkbox" id="search-bar-check" />
      <div class="collapse-title font-bold flex justify-center">
        <%= image_tag 'yubi.webp', class: "w-6 h-6" %>
        <p>ここから探す！</p>
      </div>
      <div class="collapse-content">
        <div class="flex flex-col space-y-10 px-2 sm:px-0 lg:px-32">
          <p class="sm:text-center mt-4">好きな言葉を入力するか、検索したい条件のボタンをクリックしてください</p>
          <div class="text-center">
            <p>フリーワード検索</p>
            <%= render 'search', q: @q, url: posts_path %>
          </div>
          <div class="text-center">
            <p>地域で検索</p>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6">
              <div id="sapporo" class="regionbtn btn btn-sm btn-warning mx-2 my-2">
                <ruby>
                  <rb>札幌</rb>
                  <rt>さっぽろ</rt>
                </ruby>
              </div>
              <div id="hakodate" class="regionbtn btn btn-sm btn-warning mx-2 my-2">
                <ruby>
                  <rb>函館</rb>
                  <rt>はこだて</rt>
                </ruby>
              </div>
              <div id="asahikawa" class="regionbtn btn btn-sm btn-warning mx-2 my-2">
                <ruby>
                  <rb>旭川</rb>
                  <rt>あさひかわ</rt>
                </ruby>
              </div>
              <div id="obihiro" class="regionbtn btn btn-sm btn-warning mx-2 my-2">
                <ruby>
                  <rb>帯広</rb>
                  <rt>おびひろ</rt>
                </ruby>
              </div>
              <div id="wakkanai" class="regionbtn btn btn-sm btn-warning mx-2 my-2">
                <ruby>
                  <rb>稚内</rb>
                  <rt>わっかない</rt>
                </ruby>
              </div>
              <div id="abassiri-kusiro" class="regionbtn btn btn-sm btn-warning mx-2 my-2">
                <ruby>
                  <rb>網走・釧路</rb>
                  <rt>あばしり　くしろ</rt>
                </ruby>
              </div>
            </div>
          </div>
          <div class="text-center">
            <p>タグで検索</p>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6">
              <% Tag.all.each do |tag| %>
                <div class="px-2 my-2">
                  <%= link_to tag.title, posts_path(tag_id: tag.id), class: "btn btn-sm #{params[:tag_id].to_i == tag.id ? 'btn-success' : 'btn-warning'} w-full" %>
                </div>
              <% end %>
            </div>
          </div>
          <div class="text-center">
            <p>ベストシーズンで検索</p>
            <div class="grid grid-cols-4 sm:grid-cols-3 md:grid-cols-6">
              <% Season.limit(12).each do |season| %>
                <div class="px-1.5 my-2">
                  <%= link_to season.title, posts_path(season_id: season.id), class: "btn btn-sm #{params[:season_id].to_i == season.id ? 'btn-success' : 'btn-warning'} w-full" %>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="search-reset" class="<%= @filtering_active ? 'w-1/6 sm:w-1/12' : '' %>">
    <% if @filtering_active %>
      <%= link_to '解除', posts_path, class: "btn btn-info w-full h-[62px] rounded-2xl" %>
    <% end %>
  </div>
</div>


<!-- マップを表示する要素 -->
<div id="map" class="w-auto h-[400px] sm:h-[800px]"></div>

<!-- モーダルを表示する要素 -->
<dialog id="post_modal" class="modal">
  <div class="modal-box sm:w-[500px]">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
    </form>
    <div class="post_show mt-4"></div>
  </div>
</dialog>


<script>
  // 地図を初期化する関数
  function initMap() {
    // 地図要素を取得する（マーカーを表示させるために必要）
    const mapElement = document.getElementById('map');

    // 地図のオプション
    const mapOptions = {
      center: { lat: 43.534001, lng: 142.774103 }, // 地図の初期表示位置
      zoom: 7, // ズームレベル
      streetViewControl: false, // ストリートビューのボタン非表示
      mapTypeControl: false, // 地図、航空写真のボタン非表示
      fullscreenControl: false, // フルスクリーンボタン非表示
      keyboardShortcuts: false //キーボードショートカットオフ、キーボードボタン非表示
    };

    // 地図を指定した要素に表示
    const map = new google.maps.Map(mapElement, mapOptions);

    // 各タグに対応するマーカーの色を定義
    const tagColors = {
      'グルメ': 'https://maps.google.com/mapfiles/ms/micons/orange.png',
      'レジャー': 'https://maps.google.com/mapfiles/ms/micons/yellow.png',
      '宿泊': 'https://maps.google.com/mapfiles/ms/micons/red.png',
      '観光': 'https://maps.google.com/mapfiles/ms/micons/lightblue.png',
      'お店': 'https://maps.google.com/mapfiles/ms/micons/pink.png',
      '道の駅': 'https://maps.google.com/mapfiles/kml/paddle/wht-blank.png',
    };

    // マーカーを追加（Postの情報からマーカーを追加する）
    <% @posts.each do |post| %>
      (() => {
        let firstTag = '<%= post.tags.first.title %>';

        let marker = new google.maps.Marker({ //繰り返しの時はconstではなくletで定義
          position: {lat: <%= post.latitude %>, lng: <%= post.longitude %>}, // 投稿の緯度経度情報
          map: map,
          icon: {
            url: tagColors[firstTag],
            scaledSize: new google.maps.Size(40, 40),
          },
        });

        // マーカーをクリックすると投稿詳細に遷移
        marker.addListener('click', function() {
          const modalContent = `
            <div>
              <p class="text-xl font-bold mb-2"><%= post.title %></p>

              <div class="mb-5">
                <% post.tags.each do |tag| %>
                  <span class="badge badge-info gap-2"><%= tag.title %></span>
                <% end %>
                <% post.seasons.each do |season| %>
                  <span class="badge badge-warning gap-2"><%= season.title %></span>
                <% end %>
              </div>

              <% if post.images.present? %>
                <div class="flex justify-center">
                  <div class="mb-5">
                    <% first_image = post.images.first %>
                    <%= image_tag first_image.to_s, class: "w-[260px] sm:w-[300px]" %>
                  </div>
                </div>
              <% end %>

              <% if post.body.present? %>
                <p class="mb-5"><%= post.body %></p>
              <% end %>

              <div class="flex justify-end">
                <%= link_to "詳細へ", post_path(post), class: "btn" %>
              </div>
            </div>
          `;

          document.querySelector('.post_show').innerHTML = modalContent;
          post_modal.showModal();
        });
      })();
    <% end %>


    // 地域ごとにフォーカスする機能
    let windowWidth = window.innerWidth; // 画面サイズによる分岐

    // 検索解除ボタンの表示
    function searchReset() {
      const searchResetButton = document.getElementById('search-reset')
      const searchBar = document.getElementById('search-bar')
      const searchResetButtonContent = `
        <%= link_to '解除', posts_path, class: "btn btn-info w-full h-[62px] rounded-2xl" %>
      `;

      searchBar.classList.remove('w-full');

      if (windowWidth >= 440) {
        searchBar.classList.add('w-11/12');
        searchResetButton.classList.add('w-1/12');
      } else {
        searchBar.classList.add('w-5/6');
        searchResetButton.classList.add('w-1/6');
      }
      searchResetButton.innerHTML = searchResetButtonContent;

      const checkbox = document.getElementById('search-bar-check');
      checkbox.checked = false;
    }

    // 札幌
    const sapporo = document.getElementById('sapporo')
    sapporo.addEventListener('click', function() {
      const sapporoMapOptions = (windowWidth >= 440) ?
        {
          center: { lat: 42.846847, lng: 141.158352 },
          zoom: 10,
        } :
        {
          center: { lat: 42.846847, lng: 141.158352 },
          zoom: 9,
        };

      map.setCenter(sapporoMapOptions.center);
      map.setZoom(sapporoMapOptions.zoom);

      resetAllButtons();
      sapporo.classList.remove('btn-warning');
      sapporo.classList.add('btn-success');
      searchReset();
    });

    // 函館
    const hakodate = document.getElementById('hakodate')
    hakodate.addEventListener('click', function() {
      const hakodateMapOptions = (windowWidth >= 440) ?
        {
          center: { lat: 42.094612, lng: 140.435961 },
          zoom: 10,
        } :
        {
          center: { lat: 42.067675, lng: 140.472418 },
          zoom: 9,
        };

      map.setCenter(hakodateMapOptions.center);
      map.setZoom(hakodateMapOptions.zoom);

      resetAllButtons();
      hakodate.classList.remove('btn-warning');
      hakodate.classList.add('btn-success');
      searchReset();
    });

    // 旭川
    const asahikawa = document.getElementById('asahikawa')
    asahikawa.addEventListener('click', function() {
      const asahikawaMapOptions = (windowWidth >= 440) ?
        {
          center: { lat: 43.522167, lng: 142.434513 },
          zoom: 10,
        } :
        {
          center: { lat: 43.577175, lng: 142.517469 },
          zoom: 9,
        };

      map.setCenter(asahikawaMapOptions.center);
      map.setZoom(asahikawaMapOptions.zoom);

      resetAllButtons();
      asahikawa.classList.remove('btn-warning');
      asahikawa.classList.add('btn-success');
      searchReset();
    });

    // 帯広
    const obihiro = document.getElementById('obihiro')
    obihiro.addEventListener('click', function() {
      const obihiroMapOptions = (windowWidth >= 440) ?
        {
          center: { lat: 42.730786, lng: 143.099058 },
          zoom: 10,
        } :
        {
          center: { lat: 42.856161, lng: 143.250370 },
          zoom: 9,
        };

      map.setCenter(obihiroMapOptions.center);
      map.setZoom(obihiroMapOptions.zoom);

      resetAllButtons();
      obihiro.classList.remove('btn-warning');
      obihiro.classList.add('btn-success');
      searchReset();
    });

    // 稚内
    const wakkanai = document.getElementById('wakkanai')
    wakkanai.addEventListener('click', function() {
      const wakkanaiMapOptions = (windowWidth >= 440) ?
        {
          center: { lat: 44.722799, lng: 142.194106 },
          zoom: 9,
        } :
        {
          center: { lat: 44.722799, lng: 142.194106 },
          zoom: 8,
        };

      map.setCenter(wakkanaiMapOptions.center);
      map.setZoom(wakkanaiMapOptions.zoom);

      resetAllButtons();
      wakkanai.classList.remove('btn-warning');
      wakkanai.classList.add('btn-success');
      searchReset();
    });

    // 網走・釧路
    const abassiriKusiro = document.getElementById('abassiri-kusiro')
    abassiriKusiro.addEventListener('click', function() {
      const abassiriKusiroMapOptions = (windowWidth >= 440) ?
        {
          center: { lat: 43.686360, lng: 144.850476 },
          zoom: 9,
        } :
        {
          center: { lat: 43.634636, lng: 144.436031 },
          zoom: 8,
        };

      map.setCenter(abassiriKusiroMapOptions.center);
      map.setZoom(abassiriKusiroMapOptions.zoom);

      resetAllButtons();
      abassiriKusiro.classList.remove('btn-warning');
      abassiriKusiro.classList.add('btn-success');
      searchReset();
    });

    // 他のボタンの色を戻すための関数（一旦全てのボタンの色を元に戻す）
    function resetAllButtons() {
      const buttons = document.querySelectorAll('.regionbtn');

      buttons.forEach(button => {
        button.classList.remove('btn-success');
        button.classList.add('btn-warning');
      });
    }

  }


  // 画面のどこを押してもモーダルを閉じる
  document.addEventListener('click', function(event) {
    const modal = document.getElementById('post_modal');
    if (event.target === modal) {
      modal.close();
    }
  });
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_API_KEY"] %>&callback=initMap"></script>
