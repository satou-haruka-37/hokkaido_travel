<div class="p-7 flex">
  <%= image_tag 'redmarker.webp', class: "w-6 h-6" %>を押しておすすめスポットを見つけよう
</div>
<div class="flex">
  <div id="search-bar" class="<%= @filtering_active ? 'w-5/6 sm:w-11/12' : 'w-full' %>">
    <div class="collapse collapse-arrow bg-base-200">
      <input type="checkbox" id="search-bar-check" />
      <div class="collapse-title font-bold flex justify-center">
        <%= image_tag 'yubi.webp', class: "w-6 h-6" %>
        <p>ここから検索ができます</p>
      </div>
      <div class="collapse-content">
        <div class="flex flex-col space-y-5 px-2 sm:px-10 lg:px-40">
          <p class="sm:text-center my-4">好きな言葉を入力するか、検索したい条件のボタンをクリックしてください</p>
          <div>
            <p>フリーワード検索</p>
            <%= render 'search', q: @q, url: posts_path %>
          </div>
          <div>
            <p>地域で検索</p>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6">
              <div id="central-hokkaido" class="regionbtn btn btn-sm btn-warning mx-2 my-2">道央</div>
              <div id="southern-hokkaido" class="regionbtn btn btn-sm btn-warning mx-2 my-2">道南</div>
              <div id="northern-hokkaido" class="regionbtn btn btn-sm btn-warning mx-2 my-2">道北</div>
              <div id="eastern-hokkaido" class="regionbtn btn btn-sm btn-warning mx-2 my-2">道東</div>
            </div>
          </div>
          <div>
            <p>タグで検索</p>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6">
              <% Tag.all.each do |tag| %>
                <div class="px-2 my-2">
                  <%= link_to tag.title, posts_path(tag_id: tag.id), class: "btn btn-sm #{params[:tag_id].to_i == tag.id ? 'btn-success' : 'btn-warning'} w-full" %>
                </div>
              <% end %>
            </div>
          </div>
          <div>
            <p>ベストシーズンで検索</p>
            <div class="grid grid-cols-4 sm:grid-cols-3 md:grid-cols-6">
              <% Season.limit(12).each do |season| %>
                <div class="px-2 my-2">
                  <%= link_to season.title, posts_path(season_id: season.id), class: "btn btn-sm #{params[:season_id].to_i == season.id ? 'btn-success' : 'btn-warning'} w-full" %>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="search-reset" class="<%= @filtering_active ? 'w-1/6 sm:w-1/12' : '' %>">
    <% if @filtering_active %>
      <%= link_to '解除', posts_path, class: "btn btn-info w-full h-[62px] rounded-2xl" %>
    <% end %>
  </div>
</div>


<!-- マップを表示する要素 -->
<div id="map" class="w-auto h-[400px] sm:h-[750px]"></div>

<dialog id="post_modal" class="modal">
  <div class="modal-box sm:w-[500px]">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
    </form>
    <div class="post_show mt-4"></div>
  </div>
</dialog>


<script>
  // 地図を初期化する関数
  function initMap() {
    // 地図要素を取得する（マーカーを表示させるために必要）
    const mapElement = document.getElementById('map');

    // 地図のオプション
    const mapOptions = {
      center: { lat: 43.534001, lng: 142.774103 }, // 地図の初期表示位置
      zoom: 7, // ズームレベル
      streetViewControl: false, // ストリートビューのボタン非表示
      mapTypeControl: false, // 地図、航空写真のボタン非表示
      fullscreenControl: false, // フルスクリーンボタン非表示
      keyboardShortcuts: false //キーボードショートカットオフ、キーボードボタン非表示
    };

    // 地図を指定した要素に表示
    const map = new google.maps.Map(mapElement, mapOptions);

    // 各タグに対応するマーカーの色を定義
    const tagColors = {
      'グルメ': 'https://maps.google.com/mapfiles/ms/micons/orange.png',
      'レジャー': 'https://maps.google.com/mapfiles/ms/micons/yellow.png',
      '宿泊': 'https://maps.google.com/mapfiles/ms/micons/red.png',
      '観光': 'https://maps.google.com/mapfiles/ms/micons/lightblue.png',
      'お店': 'https://maps.google.com/mapfiles/ms/micons/pink.png',
      '道の駅': 'https://maps.google.com/mapfiles/kml/paddle/wht-blank.png',
    };

    // マーカーを追加（Postの情報からマーカーを追加する）
    <% @posts.each do |post| %>
      (() => {
        let firstTag = '<%= post.tags.first.title %>';

        let marker = new google.maps.Marker({ //繰り返しの時はconstではなくletで定義
          position: {lat: <%= post.latitude %>, lng: <%= post.longitude %>}, // 投稿の緯度経度情報
          map: map,
          icon: {
            url: tagColors[firstTag],
            scaledSize: new google.maps.Size(40, 40),
          },
        });

        // マーカーをクリックすると投稿詳細に遷移
        marker.addListener('click', function() {
          const modalContent = `
            <div>
              <p class="text-xl font-bold mb-2"><%= post.title %></p>

              <div class="mb-5">
                <% post.tags.each do |tag| %>
                  <span class="badge badge-info gap-2"><%= tag.title %></span>
                <% end %>
                <% post.seasons.each do |season| %>
                  <span class="badge badge-warning gap-2"><%= season.title %></span>
                <% end %>
              </div>

              <% if post.images.present? %>
                <div class="flex justify-center">
                  <div class="mb-5">
                    <% first_image = post.images.first %>
                    <%= image_tag first_image.to_s, class: "w-[260px] sm:w-[300px]" %>
                  </div>
                </div>
              <% end %>

              <% if post.images.present? %>
                <p class="mb-5"><%= post.body %></p>
              <% end %>

              <div class="flex justify-end">
                <%= link_to "詳細へ", post_path(post), class: "btn" %>
              </div>
            </div>
          `;

          document.querySelector('.post_show').innerHTML = modalContent;
          post_modal.showModal();
        });
      })();
    <% end %>


    // 地域ごとにフォーカスする機能

    // 検索解除ボタンの表示
    function searchReset() {
      const searchResetButton = document.getElementById('search-reset')
      const searchBar = document.getElementById('search-bar')
      const searchResetButtonContent = `
        <%= link_to '解除', posts_path, class: "btn btn-info w-full h-[62px] rounded-2xl" %>
      `;

      searchBar.classList.remove('w-full');

      let windowWidth = window.innerWidth;
      if (windowWidth >= 440) {
        searchBar.classList.add('w-11/12');
        searchResetButton.classList.add('w-1/12');
      } else {
        searchBar.classList.add('w-5/6');
        searchResetButton.classList.add('w-1/6');
      }
      searchResetButton.innerHTML = searchResetButtonContent;
    }

    // 道央
    const centralHokkaido = document.getElementById('central-hokkaido')
    centralHokkaido.addEventListener('click', function() {
      const centralHokkaidoMapOptions = {
        center: { lat: 42.837586, lng: 141.665121 },
        zoom: 9,
      };

      map.setCenter(centralHokkaidoMapOptions.center);
      map.setZoom(centralHokkaidoMapOptions.zoom);

      resetAllButtons();
      centralHokkaido.classList.remove('btn-warning');
      centralHokkaido.classList.add('btn-success');
      searchReset();
      const checkbox = document.getElementById('search-bar-check');
      checkbox.checked = false;
    });

    // 道南
    const southernHokkaido = document.getElementById('southern-hokkaido')
    southernHokkaido.addEventListener('click', function() {
      const southernHokkaidoMapOptions = {
        center: { lat: 42.132789, lng: 140.132470 },
        zoom: 9,
      };

      map.setCenter(southernHokkaidoMapOptions.center);
      map.setZoom(southernHokkaidoMapOptions.zoom);

      resetAllButtons();
      southernHokkaido.classList.remove('btn-warning');
      southernHokkaido.classList.add('btn-success');
      searchReset();
      const checkbox = document.getElementById('search-bar-check');
      checkbox.checked = false;
    });

    // 道北
    const northernHokkaido = document.getElementById('northern-hokkaido')
    northernHokkaido.addEventListener('click', function() {
      const northernHokkaidoMapOptions = {
        center: { lat: 44.424222, lng: 142.475780 },
        zoom: 8,
      };

      map.setCenter(northernHokkaidoMapOptions.center);
      map.setZoom(northernHokkaidoMapOptions.zoom);

      resetAllButtons();
      northernHokkaido.classList.remove('btn-warning');
      northernHokkaido.classList.add('btn-success');
      searchReset();
      const checkbox = document.getElementById('search-bar-check');
      checkbox.checked = false;
    });

    // 道東
    const easternHokkaido = document.getElementById('eastern-hokkaido')
    easternHokkaido.addEventListener('click', function() {
      const easternHokkaidoMapOptions = {
        center: { lat: 43.524780, lng: 144.276112 },
        zoom: 9,
      };

      map.setCenter(easternHokkaidoMapOptions.center);
      map.setZoom(easternHokkaidoMapOptions.zoom);

      resetAllButtons();
      easternHokkaido.classList.remove('btn-warning');
      easternHokkaido.classList.add('btn-success');
      searchReset();
      const checkbox = document.getElementById('search-bar-check');
      checkbox.checked = false;
    });

    // 他のボタンの色を戻すための関数（一旦全てのボタンの色を元に戻す）
    function resetAllButtons() {
      const buttons = document.querySelectorAll('.regionbtn');

      buttons.forEach(button => {
        button.classList.remove('btn-success');
        button.classList.add('btn-warning');
      });
    }

  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_API_KEY"] %>&callback=initMap"></script>
